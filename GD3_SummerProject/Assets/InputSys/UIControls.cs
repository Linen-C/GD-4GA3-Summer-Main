//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSys/UIControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIControls"",
    ""maps"": [
        {
            ""name"": ""InGameUI"",
            ""id"": ""4026c9d2-5e84-4b47-a21e-da2ed1374b34"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""6df8d238-2f3d-4a7a-9e3a-f8e50b04e80f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Retry"",
                    ""type"": ""Button"",
                    ""id"": ""53f16344-dff7-4d49-b7ef-c12f6b2e3c34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6ec31456-07d2-4ee5-a7a8-06e56c788fdd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a24785bb-022c-4c49-822e-999d2cbeb692"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""JoyPad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4316c99b-2884-4e42-8ff6-d715b6cfa4b6"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Retry"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7dbe32ed-1543-4932-9744-6712341ad96d"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""JoyPad"",
                    ""action"": ""Retry"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // InGameUI
        m_InGameUI = asset.FindActionMap("InGameUI", throwIfNotFound: true);
        m_InGameUI_Pause = m_InGameUI.FindAction("Pause", throwIfNotFound: true);
        m_InGameUI_Retry = m_InGameUI.FindAction("Retry", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InGameUI
    private readonly InputActionMap m_InGameUI;
    private IInGameUIActions m_InGameUIActionsCallbackInterface;
    private readonly InputAction m_InGameUI_Pause;
    private readonly InputAction m_InGameUI_Retry;
    public struct InGameUIActions
    {
        private @UIControls m_Wrapper;
        public InGameUIActions(@UIControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_InGameUI_Pause;
        public InputAction @Retry => m_Wrapper.m_InGameUI_Retry;
        public InputActionMap Get() { return m_Wrapper.m_InGameUI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InGameUIActions set) { return set.Get(); }
        public void SetCallbacks(IInGameUIActions instance)
        {
            if (m_Wrapper.m_InGameUIActionsCallbackInterface != null)
            {
                @Pause.started -= m_Wrapper.m_InGameUIActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_InGameUIActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_InGameUIActionsCallbackInterface.OnPause;
                @Retry.started -= m_Wrapper.m_InGameUIActionsCallbackInterface.OnRetry;
                @Retry.performed -= m_Wrapper.m_InGameUIActionsCallbackInterface.OnRetry;
                @Retry.canceled -= m_Wrapper.m_InGameUIActionsCallbackInterface.OnRetry;
            }
            m_Wrapper.m_InGameUIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Retry.started += instance.OnRetry;
                @Retry.performed += instance.OnRetry;
                @Retry.canceled += instance.OnRetry;
            }
        }
    }
    public InGameUIActions @InGameUI => new InGameUIActions(this);
    public interface IInGameUIActions
    {
        void OnPause(InputAction.CallbackContext context);
        void OnRetry(InputAction.CallbackContext context);
    }
}
